/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Malware is a type of TTP that is also known as malicious code and malicious software, refers to a program that is inserted into a system, usually covertly, with the intent of compromising the confidentiality, integrity, or availability of the victim's data, applications, or operating system (OS) or of otherwise annoying or disrupting the victim.
 */
export declare type Malware = (Core & {
    /**
     * The type of this object, which MUST be the literal `malware`.
     */
    type: "malware";
    id?: Id;
    /**
     * Alternative names used to identify this Malware or Malware family.
     */
    aliases?: string[];
    first_seen?: MalwareFirstSeenTimestamp;
    last_seen?: MalwareLastSeenTimestamp;
    /**
     * The operating systems that the malware family or malware instance is executable on.
     */
    operating_system_refs?: (Identifier & {
        [k: string]: unknown;
    })[];
    /**
     * The processor architectures (e.g., x86, ARM, etc.) that the malware instance or family is executable on. Open Vocab - processor-architecture-os.
     */
    architecture_execution_envs?: string[];
    /**
     * The programming language(s) used to implement the malware instance or family. Open Vocab - implementation-language-ov.
     */
    implementation_languages?: string[];
    /**
     * Specifies any capabilities identified for the malware instance or family. Open Vocab - malware-capabilities-ov.
     */
    capabilities?: string[];
    /**
     * The sample_refs property specifies a list of identifiers of the SCO file or artifact objects associated with this malware instance(s) or family.
     */
    sample_refs?: string[];
    /**
     * The type of malware being described. Open Vocab - malware-type-ov
     */
    malware_types?: string[];
    /**
     * The name used to identify the Malware.
     */
    name?: string;
    /**
     * Provides more context and details about the Malware object.
     */
    description?: string;
    /**
     * The list of kill chain phases for which this Malware instance can be used.
     */
    kill_chain_phases?: KillChainPhase[];
    [k: string]: unknown;
}) & ({
    /**
     * Whether the object represents a malware family (if true) or a malware instance (if false).
     */
    is_family?: false;
    [k: string]: unknown;
} | {
    /**
     * Whether the object represents a malware family (if true) or a malware instance (if false).
     */
    is_family?: true;
    [k: string]: unknown;
});
/**
 * Common properties and behavior across all STIX Domain Objects and STIX Relationship Objects.
 */
export declare type Core = Properties;
/**
 * The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.
 *
 * This interface was referenced by `Properties`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9_]{0,245}_bin$".
 */
export declare type Binary = string;
/**
 * The hex data type encodes an array of octets (8-bit bytes) as hexadecimal. The string MUST consist of an even number of hexadecimal characters, which are the digits '0' through '9' and the letters 'a' through 'f'.  In order to allow pattern matching on custom objects, all properties that use the hex type, the property name MUST end with '_hex'.
 *
 * This interface was referenced by `Properties`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9_]{0,245}_hex$".
 */
export declare type Hex = string;
/**
 * The time that the malware instance or family was first seen.
 */
export declare type MalwareFirstSeenTimestamp = string;
/**
 * The time that the malware family or malware instance was last seen.
 */
export declare type MalwareLastSeenTimestamp = string;
/**
 * Represents identifiers across the CTI specifications. The format consists of the name of the top-level object being identified, followed by two dashes (--), followed by a UUIDv4.
 */
export declare type Identifier = string;
/**
 * Rules for custom properties
 */
export interface Properties {
}
export interface Id {
    [k: string]: unknown;
}
/**
 * The kill-chain-phase represents a phase in a kill chain.
 */
export interface KillChainPhase {
    /**
     * The name of the kill chain.
     */
    kill_chain_name: string;
    /**
     * The name of the phase in the kill chain.
     */
    phase_name: string;
    [k: string]: unknown;
}
