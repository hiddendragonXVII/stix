/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * Malware Analysis captures the metadata and results of a particular analysis performed (static or dynamic) on the malware instance or family.
 */
export declare type MalwareAnalysis = (Core & {
    /**
     * The type of this object, which MUST be the literal `malware-analysis`.
     */
    type?: "malware-analysis";
    id?: Id;
    /**
     * The name of the analysis engine or product that was used for this analysis.
     */
    product?: string;
    /**
     * The version of the analysis product that was used to perform this analysis.
     */
    version?: string;
    /**
     * The version of the analysis product configuration that was used to perform this analysis.
     */
    configuration_version?: string;
    /**
     * The particular analysis product modules that were used to perform the analysis.
     */
    modules?: string[];
    /**
     * The version of the analysis engine or product that was used to perform this analysis.
     */
    analysis_engine_version?: string;
    /**
     * The version of the analysis definitions used by the analysis tool.
     */
    analysis_definition_version?: string;
    submitted?: Timestamp;
    analysis_started?: Timestamp1;
    analysis_ended?: Timestamp2;
    /**
     * The classification result or name assigned to the malware instance by the scanner tool.
     */
    result_name?: string;
    /**
     * The classification result as determined by the scanner or tool analysis process.
     */
    result?: string;
    /**
     * A description of the virtual machine environment used to host the guest operating system (if applicable) that was used for the dynamic analysis of the malware instance or family.
     */
    host_vm_ref?: Identifier & {
        [k: string]: unknown;
    };
    /**
     * The operating system that was used to perform the dynamic analysis.
     */
    operating_system_ref?: Identifier & {
        [k: string]: unknown;
    };
    /**
     * Any non-standard software installed on the operating system used for the dynamic analysis of the malware instance or family.
     */
    installed_software_refs?: (Identifier & {
        [k: string]: unknown;
    })[];
    /**
     * The list of STIX objects that were captured during the analysis process.
     */
    analysis_sco_refs?: Identifier[];
    /**
     * Refers to the object this analysis was performed against.
     */
    sample_ref?: Identifier & {
        [k: string]: unknown;
    };
    [k: string]: unknown;
}) & {
    [k: string]: unknown;
};
/**
 * Common properties and behavior across all STIX Domain Objects and STIX Relationship Objects.
 */
export declare type Core = Properties;
/**
 * The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.
 *
 * This interface was referenced by `Properties`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9_]{0,245}_bin$".
 */
export declare type Binary = string;
/**
 * The hex data type encodes an array of octets (8-bit bytes) as hexadecimal. The string MUST consist of an even number of hexadecimal characters, which are the digits '0' through '9' and the letters 'a' through 'f'.  In order to allow pattern matching on custom objects, all properties that use the hex type, the property name MUST end with '_hex'.
 *
 * This interface was referenced by `Properties`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9_]{0,245}_hex$".
 */
export declare type Hex = string;
/**
 * The date and time that this malware was first submitted for scanning or analysis.
 */
export declare type Timestamp = string;
/**
 * The date and time that the malware analysis was initiated.
 */
export declare type Timestamp1 = string;
/**
 * The date and time that the malware analysis ended.
 */
export declare type Timestamp2 = string;
/**
 * Represents identifiers across the CTI specifications. The format consists of the name of the top-level object being identified, followed by two dashes (--), followed by a UUIDv4.
 */
export declare type Identifier = string;
/**
 * Rules for custom properties
 */
export interface Properties {
}
export interface Id {
    [k: string]: unknown;
}
