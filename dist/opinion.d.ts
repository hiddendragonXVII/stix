/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
/**
 * An Opinion is an assessment of the correctness of the information in a STIX Object produced by a different entity and captures the level of agreement or disagreement using a fixed scale.
 */
export declare type Opinion = Core & {
    /**
     * The type of this object, which MUST be the literal `opinion`.
     */
    type: "opinion";
    id?: Id;
    /**
     * An explanation of why the producer has this Opinion.
     */
    explanation?: string;
    /**
     * The name of the author(s) of this opinion (e.g., the analyst(s) that created it).
     */
    authors?: string[];
    /**
     * The STIX Objects (SDOs and SROs) that the opinion is being applied to.
     */
    object_refs?: Identifier[];
    /**
     * The opinion that the producer has about about all of the STIX Object(s) listed in the object_refs property.
     */
    opinion?: "strongly-disagree" | "disagree" | "neutral" | "agree" | "strongly-agree";
    [k: string]: unknown;
};
/**
 * Common properties and behavior across all STIX Domain Objects and STIX Relationship Objects.
 */
export declare type Core = Properties;
/**
 * The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.
 *
 * This interface was referenced by `Properties`'s JSON-Schema definition
 * via the `patternProperty` "^[a-z][a-z0-9_]{0,245}_bin$".
 */
export declare type Binary = string;
/**
 * Represents identifiers across the CTI specifications. The format consists of the name of the top-level object being identified, followed by two dashes (--), followed by a UUIDv4.
 */
export declare type Identifier = string;
/**
 * Rules for custom properties
 */
export interface Properties {
}
export interface Id {
    [k: string]: unknown;
}
